}else{
print("es otra cosa")
#acciones
}
a<-2
if(a>0){
print("es mayor a cero")
}else if(a<0){
print("es menor a cero")
}else{
print("es otra cosa")
}
rm()
a<-2
if(a>0){
print("mayor a cero")
}else if(a<0){
print("menor a cero")
}else{
print("otra cosa")
}
a<-"Hola"
if(a>0){
print("mayor a cero")
}else if(a<0){
print("menor a cero")
}else{
print("otra cosa")
}
a<-"-1"
if(a>0){
print("mayor a cero")
}else if(a<0){
print("menor a cero")
}else{
print("otra cosa")
}
grepl("[a-z a-z]") =
grepl("[a-z a-z]") =
grepl("[a-z a-z]") =
grepl("[a-z a-z]") =
grepl("[a-z a-z]") = "otra cosa"
grepl("[a-z a-z]") = ("hola")
if(a>"hola")
grepl("[a-z A-Z]"){} = ("hola")
if(a>0){"hola"
}
grepl("[a-z A-Z]"){} = ("hola")
# (string or doublie) -> string
#si A>0 Entonces "mayor a cero"
#si A<0 Entonces " menos a cero"
# si no "es otra cosa"
#a <- "hola mundo"
A<- 4
if(grepl("[A-Z a-z]", a)){
print("es mayor a cero")
}
print("otra cosa")
if(grepl("[A-Z a-z]", a)){
print("otra cosa")
}
else if (a<0){
print("es menor a cero")
}
if(grepl("[A-Z a-z]", a)){
print("otra cosa")
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
if(grepl("[A-Z a-z]", a)){
print("otra cosa")
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
a<- 4
if(grepl("[A-Z a-z]", a)){
print("otra cosa")
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
a<- 0
if(grepl("[A-Z0 a-z]", a)){
print("otra cosa")
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
print(a=0)
if(grepl("[A-Z0 a-z]", a)){
print(a=0)
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
print(a=0)
}else if (a=0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
print(entonces "es igual a cero"
sino "otra cosa")
if(a==0){
print(entonces "es igual a cero"
sino "otra cosa")
}else if (a<0){
print("es menor a cero")
}else{
print("es mayor a cero")
}
if(a==0){
if(a==0){
print("es igual a cero")
}else if (a>0){
print("es mayor a cero")
}else{
print("es mayor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
print("es igual a cero")
if(a==0){
print("es igual a cero")
}else if (a>0){
print("es mayor a cero")
}else{
print("es mayor a cero")
}
if(a==0){
print("es igual a cero")
}else if (a>0){
print("es mayor a cero")
}else{
print("es menor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
if(a==0){
print("es igual a cero")
}
}else if (a>0){
print("es mayor a cero")
}else{
print("es menor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
print("es igual a cero")
if(a==0){
print("es igual a cero")
}else{
print("es otra cosa")
}else if (a>0){
print("es mayor a cero")
}else{
print("es menor a cero")
}
if(grepl("[A-Z0 a-z]", a)){
print("es igual a cero")
if(a==0){
print("es igual a cero")
}else{
print("es otra cosa")
}else if (a>0){
print("es mayor a cero")
}else{
print("es menor a cero")
}
if(a==0){
print("es igual a cero")
}else{
print("es otra cosa")
}else if (a>0){
print("es mayor a cero")
}else{
print("es menor a cero")
}
x<-2
x <- 2
print(x)
print(x)
x<-7
print(x)
x<Z
print(X)
Z<-5
print(X)
X<-7
Z<-9
X<Z
print(X)
X>=Z
X>Z
X<=Z
X==Z
k<-X>=Z
print(k)
L<-X>Z
print(L)
v<-X<=Z
print(V)
print(v)
A<-X==Z
print(A)
!A<-X<Z
A<-X==Z > V &&TRUE
A<-X==Z > A &&TRUE
A<-X==Z&& Z<A &&TRUE
print(A)
E<-X>Z&&TRUE
print(E)
E<-X>Z&&Z<X&& TRUE
print(E)
e<-X<Z||FALSE
print(e)
Q<-X<z||Z<X TRUE
Q<-X<z||Q<-Z<X TRUE
Q<-X<z||X=Z TRUE
Q<-X<Z||X=Z!! TRUE
Q<-X<Z||X=Z|| TRUE
Q<-X<Z||Q<-X=Z|| TRUE
L<-X<Z||X=Z|| TRUE
L<-X<Z|| TRUE
L<-X<Z||X=Z TRUE
L<-X<Z||Z>X TRUE
L<-X<Z||TRUE
print(L)
L<-X<Z||X=Z|| FALSE
L<-X<Z||X==Z|| FALSE
print(L)
A<-6
B<-3
Y<-A+D
A<-6
B<-3
C<-8
D<-4
Y<-A+D
print(Y)
Y<-B-C
print(Y)
Y<-A*C
print(Y)
Y<-D/B
print(Y)
Y<-A%%B
print(Y)
Y<-D%%C
print(Y
)
print(Y)
IF(A>B||B>C){
print("hola mundo")
}
IF(A>B||B>C){
print("hola mundo")
}
if(A>B||B>C){
print("hola mundo")
}
if(A>B||B>C){
print("hola mundo")
}
#si X>0 entonces 2*X
if(A>B||B>C){
print("hola mundo")
}
#double -> double
#double -> double
#si X>0 entonces 2*X
> double
#si X>0 entonces 2*X
#x<-5->10
uble
#si X>0 entonces 2*X
#x <- 5 -> 10
print(2*X)}
#double -> double
#si X>0 entonces 2*X
#x <- 5 -> 10
if(X>0){
print(2*X)
}
#f(x){2x si x>0}
#double -> double
#si X>0 entonces 2*X
#x <- 5 -> 10
if(X>0){
print(2*X)
}
2X^2 si x>0}
#double -> double
#f(x){1 si x<=0 ; 2X^2 si x>0}
X^2 si x>0}
#double -> double
#si x<=0 entonces 1
^2 si x>0}
#double -> double
#si x<=0 entonces 1
#si no 2*X**2||2*X^2
<=0 ; 2X^2 si x>0}
#double -> double
#si x<=0 entonces 1
#si no 2*X**2||2*X^2
#X <- 0 -> 1
#f(x){1 si x<=0 ; 2X^2 si x>0}
#double -> double
#si x<=0 entonces 1
#si no 2*X**2||2*X^2
#X <- 0 -> 1
if(X<=0){
print(1)
}else{
}
#f(x){1 si x<=0 ; 2X^2 si x>0}
#double -> double
#si x<=0 entonces 1
#si no 2*X**2||2*X^2
#X <- 0 -> 1
if(X<=0){
print(1)
}else{
(2X^2)
}
#f(x){1 si x<=0 ; 2X^2 si x>0}
#double -> double
#si x<=0 entonces 1
#si no 2*X**2||2*X^2
#X <- 0 -> 1
if(X<=0){
print(1)
}else{
(2*X^2)
}
print(2*X^2)
print(2*X^2)
ng
#si X>0 entonces "es positivo"
#si X>0 entonces "es positivo"
#si no X<0 entonces "es negativo"
#(double,boolean,string)->string
#(double,boolean,string)->string
#si X>0 entonces "es positivo"
#(double,boolean,string)->string
#si X>0 entonces "es positivo"
#si no X<0 entonces "es negativo"
ng)->string
#si X>0 entonces "es positivo"
#si no X<0 entonces "es negativo"
#si no "es otra cosa"
#x<-0->"es otra cosa"
print("es otra cosa")
#(double,boolean,string)->string
#si X>0 entonces "es positivo"
#si no X<0 entonces "es negativo"
#si no "es otra cosa"
#x<-0->"es otra cosa"
if(X>0){
print("es positivo")
}else if(X<0){
print("es negativo")
}else{
print("es otra cosa")
}
x->"hola"
#(double,boolean,string)->string
#si X>0 entonces "es positivo"
#si no X<0 entonces "es negativo"
#si no "es otra cosa"
#x<-0->"es otra cosa"
if(x>0){
print("es positivo")
}else if(x<0){
print("es negativo")
}else{
print("es otra cosa")
}
x->"hola"
print(x)
setwd("~/TAREA_3")
TAREA 3
las listas y el for.
Las listas son un tipo de variable que contiene colecciones de elementos de manera
ordenada, esto lo podemos asemejar a un metro o tren, donde estos tienen vagones, dentro
de cada vag贸n hay elementos, que pueden ser enteros (Integer), decimales (Doubles),
caracteres (Char), frases o palabras (String), l贸gicos (Boolean), etc., para definir una lista
hacemos lo siguiente:
TAREA 3
las listas y el for.
Las listas son un tipo de variable que contiene colecciones de elementos de manera
ordenada, esto lo podemos asemejar a un metro o tren, donde estos tienen vagones, dentro
de cada vag贸n hay elementos, que pueden ser enteros (Integer), decimales (Doubles),
caracteres (Char), frases o palabras (String), l贸gicos (Boolean), etc., para definir una lista
hacemos lo siguiente:
listaDeNumeros <- list(2,5,6,2,1,5,6,10,11,20,15)
listaDeNumeros <- list(2,5,6,2,1,5,6,10,11,20,15)
listaDeNumeros[0]
listaDeNumeros[5]
listaDeNumeros[0]
listaDeNumeros[11->5)]
listaDeNumeros[6]
listaDeNumeros[11]
listaDeNumeros[13]
Ejercicio 2
unlist(listaDeNumeros[5])
listaDeNumeros
#Ejercicio 2
unlist(listaDeNumeros[5])
listaDeNumeros[0]
listaDeNumeros[5]
(
#Ejercicio 2
unlist(listaDeNumeros[5])
#Ejercicio 2
unlist(listaDeNumeros[5])
#Ejercicio 2
unlist(listaDeNumeros[5])
listaDeNumeros1 <- UNlist(2,5,6,2,1,5,6,10,11,20,15)
listaDeNumeros1 <- unlist(2,5,6,2,1,5,6,10,11,20,15)
listaDeNumeros1
#Ejercicio 2
unlist(listaDeNumeros[5])
listaDeNumeros[5] <- 12
if(varibale[5]+1>0)
if(varibale[5]+1>0)
if(listaDeNumeros[5]+1>0){
print("se cumple")
}
if(listaDeNumeros[5]+1>0){
print("se cumple")
}
if(listaDeNumeros[5]+1>0){
print("se cumple")
}
if(unlist(listaDeNumeros[5])+1>0){
print("se cumple")
}
if(listaDeNumeros[5]+1>0){
print("se cumple")
}
if((listaDeNumeros[5])+1)>0{
print("se cumple")
}
if((listaDeNumeros[5])+1>0){
print("se cumple")
}
if(listaDeNumeros[5]+1>0){
print("se cumple")
}
if(unlist(listaDeNumeros[5])+1>0){
print("se cumple")
}
RESPUESTA 2 ALTERNATIVA:
"La lista de numero tiene fallas porque tiene cajas en el mismo sector"
"unlist es correcto porque en una gran caja tiene todos sus candidatos"
Ejercicio 3:
RESPUESTA 2 ALTERNATIVA:
"La lista de numero tiene fallas porque tiene cajas en el mismo sector"
"unlist es correcto porque en una gran caja tiene todos sus candidatos"
Ejercicio 3:
listaDeNumeros[5] <- 12
Ejercicio 3:
listaDeNumeros[5] <- 12
"lista de numeros[5]<-12"
listadenumeros[5]<-12
"listadenumeros[5]<-12
listaDeNumeros[4]
listaDeNumeros[4]
listaDeNumeros[8]
listaDeNumeros[64]
listaDeNumeros[14]
listaDeNumeros[1]
# LISTA DE NUMEROS
listaDeNumeros <- list(2,5,6,2,1,5,6,10,11,20,15)
listadenumeros[5]<-12
listadenumeros
listaDeNumeros
listaDeNumeros[5]<-12
listaDeNumeros
: listaDeNumeros[5] <- 12
[5] <- 12
length(nombre_variable)
length(listaDeNumeros)
listaDeNumeros[5]<-12
listaDeNumeros[5]
length(listaDeNumeros)
valor inicial--(5)
valorinicial--(5)
valorinicial->(5)
valorfinal<-(11)
valorinicial->(11)
valorfinal<-(5)
length(listaDeNumeros[5] <- 12)
valorinicial:valorfinal
valorinicial<-5
valorfinal<-11
valorinicial:valorfinal
valorfinal<-20
valorinicial:valorfinal
valorinicial<-11
valorfinal<-5
valorinicial:valorfinal
length(listaDeNumeros)
valorinicial<-5
valorinicial:length(listaDeNumeros)
